set ignorecase
set smartcase
set ideajoin
set surround
set wrapsearch
set clipboard+=unnamed

let mapleader = " "
" nnoremap <S-Enter> <C-W>w

" ============================================================================
" key bindings for quickly moving between windows
" h left, l right, k up, j down
" ============================================================================
nmap <leader>wh <c-w>h
nmap <leader>wl <c-w>l
nmap <leader>wk <c-w>k
nmap <leader>wj <c-w>j
nmap <leader>wv <c-w>v
nmap <leader>ws <c-w>s
nmap <leader>wc <c-w>c
nmap <leader>wm :action MoveEditorToOppositeTabGroup<CR>
nmap <leader>wo :action OpenEditorInOppositeTabGroup<CR>
nmap <leader>wz :action ToggleDistractionFreeMode<CR>
nmap <leader>wD :action CloseAllEditors<CR>

vmap <leader>wh <c-w>h
vmap <leader>wl <c-w>l
vmap <leader>wk <c-w>k
vmap <leader>wj <c-w>j
vmap <leader>wv <c-w>v
vmap <leader>ws <c-w>s
vmap <leader>wc <c-w>c
vmap <leader>wm :<Backspace><Backspace><Backspace><Backspace><Backspace>action HideAllWindows<CR>
vmap <leader>wz :<Backspace><Backspace><Backspace><Backspace><Backspace>action ToggleDistractionFreeMode<CR>
nmap <leader>jj :action AceAction<CR>

function! OpenSplitAndRestorePosition()
    execute "vsplit"
    execute "action GotoDeclaration<CR>"
endfunction

" ============================================================================
" IDE actions
" ============================================================================
nmap gd              :action GotoDeclaration<CR>
nmap gG              :call OpenSplitAndRestorePosition()<CR>
nmap gh              :action QuickJavaDoc<CR>
nmap gr              :action FindUsages<CR>
nmap gt              :action GotoTypeDeclaration<CR>
nmap gs              :action GotoSuperMethod<CR>
nmap gi              :action GotoImplementation<CR>
nmap <leader>bb      :action Rust.Build<CR>
nmap <leader>br      :action Run<CR>
nmap <leader>bs      :action Stop<CR>
nmap <leader>fs      :action SaveAll<CR>
nmap <leader>mz      :action ToggleZenMode<CR>

" Reload .ideavimrc
nmap <leader>R :action IdeaVim.ReloadVimRc.reload<CR>
vmap <leader>R :<Backspace><Backspace><Backspace><Backspace><Backspace>source ~/.ideavimrc<CR>

" vmap ctrlR :action EditorScrollToCenter

" Cursive Related =================

" Sexp editing mappings straight from paredit.vim
map <leader>J :action :cursive.actions.paredit/join<CR>
map <S-\> :action :cursive.actions.paredit/split<CR>
map <leader>S :action :cursive.actions.paredit/splice<CR>
map <S-k> :action :cursive.actions.paredit/raise<CR>

" Drag
map <S-l> :action :cursive.actions.paredit/move-form-down<CR>
map <S-h> :action :cursive.actions.paredit/move-form-up<CR>

" Slurp and barf
map <C-S-k> :action :cursive.actions.paredit/barf-forwards<CR>
map <C-S-l> :action :cursive.actions.paredit/slurp-forwards<CR>
map <C-S-h> :action :cursive.actions.paredit/slurp-backwards<CR>
map <C-S-j> :action :cursive.actions.paredit/barf-backwards<CR>

" Splice backwards and forwards
map <leader>k :action :cursive.actions.paredit/splice-killing-backwards<CR>
map <leader>j :action :cursive.actions.paredit/splice-killing-forwards<CR>

" Shift + wrapping symbol for wrapping
map <S-0> :action :cursive.actions.paredit/wrap-paren<CR>
map <S-]> :action :cursive.actions.paredit/wrap-square<CR>
map <A-S-]> :action :cursive.actions.paredit/wrap-curly<CR>
" map <S-"> :action :cursive.actions.paredit/wrap-quotes<CR>

" vim delete and change, with sexps!
map <leader>x :action :cursive.actions.paredit/kill-sexp<CR>
map <leader>d :action :cursive.actions.paredit/kill<CR>
map <leader>c :action :cursive.actions.paredit/kill-sexp<CR>
map <leader>y :action :cursive.actions.paredit/copy-as-kill<CR>

" Cycle collection
map <leader>C :action :cursive.actions.paredit/cycle-collection-type<CR>

" Cursive actions
nmap <leader>eb :action :cursive.repl.actions/load-file<CR>
nmap <leader>el :action :cursive.repl.actions/run-last-sexp<CR>
nmap <leader>sa :action :cursive.repl.actions/jump-to-repl<CR>
nmap <leader>ek :action :cursive.repl.actions/run-top-sexp<CR>
nmap <leader>en :action :cursive.repl.actions/switch-namespace<CR>
nmap <leader>ee :action :cursive.repl.actions/execute<CR>
nmap <leader>=e :action Tool_External Tools_std-clj-format<CR>
nmap <leader>== :action ReformatCode<CR>